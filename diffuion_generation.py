import numpy as np
import tensorflow as tf
import matplotlib.pyplot as plt
from tensorflow.keras.datasets import mnist

# Load MNIST data (digit 9 only)
(x_train, y_train), _ = mnist.load_data()
x_train = x_train[y_train == 9]
x_train = x_train.astype('float32') / 255.

# Add a single-channel dimension so each sample is (28, 28, 1)
x_train = np.expand_dims(x_train, axis=-1)

# Define diffusion parameters
timesteps = 1000

# Diffusion functions
def add_noise(x, t):
    noise = tf.random.normal(shape=tf.shape(x))
    alpha = 1 - (t / timesteps)
    return alpha * x + (1 - alpha) * noise

# Simple U-Net style denoising model
def get_model():
    inputs = tf.keras.layers.Input(shape=(28, 28, 1))
    x = tf.keras.layers.Conv2D(64, 3, activation='relu', padding='same')(inputs)
    x = tf.keras.layers.Conv2D(64, 3, activation='relu', padding='same')(x)
    x = tf.keras.layers.Conv2D(1, 3, activation='sigmoid', padding='same')(x)
    return tf.keras.Model(inputs, x)

model = get_model()
model.compile(optimizer='adam', loss='mse')

# Training loop
epochs = 10
batch_size = 128

for epoch in range(epochs):
    for batch_start in range(0, len(x_train), batch_size):
        batch_end = batch_start + batch_size
        batch_images = x_train[batch_start:batch_end]
        t = np.random.randint(1, timesteps)
        noisy_images = add_noise(batch_images, t)
        model.train_on_batch(noisy_images, batch_images)

    print(f"Epoch {epoch + 1}/{epochs} completed.")

# Sampling from diffusion model
def generate_images(model, num_images=4):
    noisy_imgs = tf.random.normal(shape=(num_images, 28, 28, 1))
    generated_imgs = noisy_imgs

    for t in reversed(range(1, timesteps)):
        alpha = 1 - (t / timesteps)
        generated_imgs = model.predict(generated_imgs)
        generated_imgs = (generated_imgs - (1 - alpha) * noisy_imgs) / alpha

    return generated_imgs

# Generate and plot images
sampled_imgs = generate_images(model, num_images=4)

fig, axes = plt.subplots(1, 4, figsize=(8, 2))
for img, ax in zip(sampled_imgs, axes):
    ax.imshow(tf.squeeze(img), cmap='gray')
    ax.axis('off')
plt.suptitle("Digit 9 Generated by Diffusion Model")
plt.show()
